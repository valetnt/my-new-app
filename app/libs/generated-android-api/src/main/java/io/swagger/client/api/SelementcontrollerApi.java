/**
 * SMIS2-CORE REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;


import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class SelementcontrollerApi {
  String basePath = "https://localhost:8080/smis2-core";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * listElements
  * listElements
   * @param orgId orgId
   * @param patientId patientId
   * @param since sinceDate
   * @param typeId typeId
   * @param typeNatureId typeNatureId
   * @return void
  */
  public void listElementsUsingGET (Long orgId, Long patientId, String since, Integer typeId, Integer typeNatureId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'orgId' is set
    if (orgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orgId' when calling listElementsUsingGET",
        new ApiException(400, "Missing the required parameter 'orgId' when calling listElementsUsingGET"));
    }
    // verify the required parameter 'patientId' is set
    if (patientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'patientId' when calling listElementsUsingGET",
        new ApiException(400, "Missing the required parameter 'patientId' when calling listElementsUsingGET"));
    }
    // verify the required parameter 'since' is set
    if (since == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'since' when calling listElementsUsingGET",
        new ApiException(400, "Missing the required parameter 'since' when calling listElementsUsingGET"));
    }

    // create path and map variables
    String path = "/orgs/{orgId}/patients/{patientId}/elements".replaceAll("\\{" + "orgId" + "\\}", apiInvoker.escapeString(orgId.toString())).replaceAll("\\{" + "patientId" + "\\}", apiInvoker.escapeString(patientId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "since", since));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "typeId", typeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "typeNatureId", typeNatureId));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * listElements
   * listElements
   * @param orgId orgId   * @param patientId patientId   * @param since sinceDate   * @param typeId typeId   * @param typeNatureId typeNatureId
  */
  public void listElementsUsingGET (Long orgId, Long patientId, String since, Integer typeId, Integer typeNatureId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'orgId' is set
    if (orgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orgId' when calling listElementsUsingGET",
        new ApiException(400, "Missing the required parameter 'orgId' when calling listElementsUsingGET"));
    }
    // verify the required parameter 'patientId' is set
    if (patientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'patientId' when calling listElementsUsingGET",
        new ApiException(400, "Missing the required parameter 'patientId' when calling listElementsUsingGET"));
    }
    // verify the required parameter 'since' is set
    if (since == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'since' when calling listElementsUsingGET",
        new ApiException(400, "Missing the required parameter 'since' when calling listElementsUsingGET"));
    }

    // create path and map variables
    String path = "/orgs/{orgId}/patients/{patientId}/elements".replaceAll("\\{format\\}","json").replaceAll("\\{" + "orgId" + "\\}", apiInvoker.escapeString(orgId.toString())).replaceAll("\\{" + "patientId" + "\\}", apiInvoker.escapeString(patientId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "since", since));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "typeId", typeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "typeNatureId", typeNatureId));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * showElementAsPdf2
  * showElementAsPdf2
   * @param orgId orgId
   * @param patientId patientId
   * @param elementId elementId
   * @return List<byte[]>
  */
  public List<byte[]> showElementAsPdf2UsingGET (Long orgId, Long patientId, Long elementId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'orgId' is set
    if (orgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orgId' when calling showElementAsPdf2UsingGET",
        new ApiException(400, "Missing the required parameter 'orgId' when calling showElementAsPdf2UsingGET"));
    }
    // verify the required parameter 'patientId' is set
    if (patientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'patientId' when calling showElementAsPdf2UsingGET",
        new ApiException(400, "Missing the required parameter 'patientId' when calling showElementAsPdf2UsingGET"));
    }
    // verify the required parameter 'elementId' is set
    if (elementId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'elementId' when calling showElementAsPdf2UsingGET",
        new ApiException(400, "Missing the required parameter 'elementId' when calling showElementAsPdf2UsingGET"));
    }

    // create path and map variables
    String path = "/orgs/{orgId}/patients/{patientId}/elements/{elementId}/pdf/{fileName}".replaceAll("\\{" + "orgId" + "\\}", apiInvoker.escapeString(orgId.toString())).replaceAll("\\{" + "patientId" + "\\}", apiInvoker.escapeString(patientId.toString())).replaceAll("\\{" + "elementId" + "\\}", apiInvoker.escapeString(elementId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<byte[]>) ApiInvoker.deserialize(localVarResponse, "array", byte[].class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * showElementAsPdf2
   * showElementAsPdf2
   * @param orgId orgId   * @param patientId patientId   * @param elementId elementId
  */
  public void showElementAsPdf2UsingGET (Long orgId, Long patientId, Long elementId, final Response.Listener<List<byte[]>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'orgId' is set
    if (orgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orgId' when calling showElementAsPdf2UsingGET",
        new ApiException(400, "Missing the required parameter 'orgId' when calling showElementAsPdf2UsingGET"));
    }
    // verify the required parameter 'patientId' is set
    if (patientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'patientId' when calling showElementAsPdf2UsingGET",
        new ApiException(400, "Missing the required parameter 'patientId' when calling showElementAsPdf2UsingGET"));
    }
    // verify the required parameter 'elementId' is set
    if (elementId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'elementId' when calling showElementAsPdf2UsingGET",
        new ApiException(400, "Missing the required parameter 'elementId' when calling showElementAsPdf2UsingGET"));
    }

    // create path and map variables
    String path = "/orgs/{orgId}/patients/{patientId}/elements/{elementId}/pdf/{fileName}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "orgId" + "\\}", apiInvoker.escapeString(orgId.toString())).replaceAll("\\{" + "patientId" + "\\}", apiInvoker.escapeString(patientId.toString())).replaceAll("\\{" + "elementId" + "\\}", apiInvoker.escapeString(elementId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<byte[]>) ApiInvoker.deserialize(localVarResponse,  "array", byte[].class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * showElementAsPdf
  * showElementAsPdf
   * @param orgId orgId
   * @param patientId patientId
   * @param elementId elementId
   * @return List<byte[]>
  */
  public List<byte[]> showElementAsPdfUsingGET (Long orgId, Long patientId, Long elementId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'orgId' is set
    if (orgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orgId' when calling showElementAsPdfUsingGET",
        new ApiException(400, "Missing the required parameter 'orgId' when calling showElementAsPdfUsingGET"));
    }
    // verify the required parameter 'patientId' is set
    if (patientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'patientId' when calling showElementAsPdfUsingGET",
        new ApiException(400, "Missing the required parameter 'patientId' when calling showElementAsPdfUsingGET"));
    }
    // verify the required parameter 'elementId' is set
    if (elementId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'elementId' when calling showElementAsPdfUsingGET",
        new ApiException(400, "Missing the required parameter 'elementId' when calling showElementAsPdfUsingGET"));
    }

    // create path and map variables
    String path = "/orgs/{orgId}/patients/{patientId}/elements/{elementId}/pdf".replaceAll("\\{" + "orgId" + "\\}", apiInvoker.escapeString(orgId.toString())).replaceAll("\\{" + "patientId" + "\\}", apiInvoker.escapeString(patientId.toString())).replaceAll("\\{" + "elementId" + "\\}", apiInvoker.escapeString(elementId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<byte[]>) ApiInvoker.deserialize(localVarResponse, "array", byte[].class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * showElementAsPdf
   * showElementAsPdf
   * @param orgId orgId   * @param patientId patientId   * @param elementId elementId
  */
  public void showElementAsPdfUsingGET (Long orgId, Long patientId, Long elementId, final Response.Listener<List<byte[]>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'orgId' is set
    if (orgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orgId' when calling showElementAsPdfUsingGET",
        new ApiException(400, "Missing the required parameter 'orgId' when calling showElementAsPdfUsingGET"));
    }
    // verify the required parameter 'patientId' is set
    if (patientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'patientId' when calling showElementAsPdfUsingGET",
        new ApiException(400, "Missing the required parameter 'patientId' when calling showElementAsPdfUsingGET"));
    }
    // verify the required parameter 'elementId' is set
    if (elementId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'elementId' when calling showElementAsPdfUsingGET",
        new ApiException(400, "Missing the required parameter 'elementId' when calling showElementAsPdfUsingGET"));
    }

    // create path and map variables
    String path = "/orgs/{orgId}/patients/{patientId}/elements/{elementId}/pdf".replaceAll("\\{format\\}","json").replaceAll("\\{" + "orgId" + "\\}", apiInvoker.escapeString(orgId.toString())).replaceAll("\\{" + "patientId" + "\\}", apiInvoker.escapeString(patientId.toString())).replaceAll("\\{" + "elementId" + "\\}", apiInvoker.escapeString(elementId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<byte[]>) ApiInvoker.deserialize(localVarResponse,  "array", byte[].class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * showElementHistory
  * showElementHistory
   * @param orgId orgId
   * @param patientId patientId
   * @param elementId elementId
   * @return String
  */
  public String showElementHistoryUsingGET (Long orgId, Long patientId, Long elementId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'orgId' is set
    if (orgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orgId' when calling showElementHistoryUsingGET",
        new ApiException(400, "Missing the required parameter 'orgId' when calling showElementHistoryUsingGET"));
    }
    // verify the required parameter 'patientId' is set
    if (patientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'patientId' when calling showElementHistoryUsingGET",
        new ApiException(400, "Missing the required parameter 'patientId' when calling showElementHistoryUsingGET"));
    }
    // verify the required parameter 'elementId' is set
    if (elementId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'elementId' when calling showElementHistoryUsingGET",
        new ApiException(400, "Missing the required parameter 'elementId' when calling showElementHistoryUsingGET"));
    }

    // create path and map variables
    String path = "/orgs/{orgId}/patients/{patientId}/elements/{elementId}/history".replaceAll("\\{" + "orgId" + "\\}", apiInvoker.escapeString(orgId.toString())).replaceAll("\\{" + "patientId" + "\\}", apiInvoker.escapeString(patientId.toString())).replaceAll("\\{" + "elementId" + "\\}", apiInvoker.escapeString(elementId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * showElementHistory
   * showElementHistory
   * @param orgId orgId   * @param patientId patientId   * @param elementId elementId
  */
  public void showElementHistoryUsingGET (Long orgId, Long patientId, Long elementId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'orgId' is set
    if (orgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orgId' when calling showElementHistoryUsingGET",
        new ApiException(400, "Missing the required parameter 'orgId' when calling showElementHistoryUsingGET"));
    }
    // verify the required parameter 'patientId' is set
    if (patientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'patientId' when calling showElementHistoryUsingGET",
        new ApiException(400, "Missing the required parameter 'patientId' when calling showElementHistoryUsingGET"));
    }
    // verify the required parameter 'elementId' is set
    if (elementId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'elementId' when calling showElementHistoryUsingGET",
        new ApiException(400, "Missing the required parameter 'elementId' when calling showElementHistoryUsingGET"));
    }

    // create path and map variables
    String path = "/orgs/{orgId}/patients/{patientId}/elements/{elementId}/history".replaceAll("\\{format\\}","json").replaceAll("\\{" + "orgId" + "\\}", apiInvoker.escapeString(orgId.toString())).replaceAll("\\{" + "patientId" + "\\}", apiInvoker.escapeString(patientId.toString())).replaceAll("\\{" + "elementId" + "\\}", apiInvoker.escapeString(elementId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * showElementRevision
  * showElementRevision
   * @param orgId orgId
   * @param patientId patientId
   * @param elementId elementId
   * @param revision revision
   * @return String
  */
  public String showElementRevisionUsingGET (Long orgId, Long patientId, Long elementId, Integer revision) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'orgId' is set
    if (orgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orgId' when calling showElementRevisionUsingGET",
        new ApiException(400, "Missing the required parameter 'orgId' when calling showElementRevisionUsingGET"));
    }
    // verify the required parameter 'patientId' is set
    if (patientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'patientId' when calling showElementRevisionUsingGET",
        new ApiException(400, "Missing the required parameter 'patientId' when calling showElementRevisionUsingGET"));
    }
    // verify the required parameter 'elementId' is set
    if (elementId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'elementId' when calling showElementRevisionUsingGET",
        new ApiException(400, "Missing the required parameter 'elementId' when calling showElementRevisionUsingGET"));
    }
    // verify the required parameter 'revision' is set
    if (revision == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'revision' when calling showElementRevisionUsingGET",
        new ApiException(400, "Missing the required parameter 'revision' when calling showElementRevisionUsingGET"));
    }

    // create path and map variables
    String path = "/orgs/{orgId}/patients/{patientId}/elements/{elementId}/history/{revision}".replaceAll("\\{" + "orgId" + "\\}", apiInvoker.escapeString(orgId.toString())).replaceAll("\\{" + "patientId" + "\\}", apiInvoker.escapeString(patientId.toString())).replaceAll("\\{" + "elementId" + "\\}", apiInvoker.escapeString(elementId.toString())).replaceAll("\\{" + "revision" + "\\}", apiInvoker.escapeString(revision.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * showElementRevision
   * showElementRevision
   * @param orgId orgId   * @param patientId patientId   * @param elementId elementId   * @param revision revision
  */
  public void showElementRevisionUsingGET (Long orgId, Long patientId, Long elementId, Integer revision, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'orgId' is set
    if (orgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orgId' when calling showElementRevisionUsingGET",
        new ApiException(400, "Missing the required parameter 'orgId' when calling showElementRevisionUsingGET"));
    }
    // verify the required parameter 'patientId' is set
    if (patientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'patientId' when calling showElementRevisionUsingGET",
        new ApiException(400, "Missing the required parameter 'patientId' when calling showElementRevisionUsingGET"));
    }
    // verify the required parameter 'elementId' is set
    if (elementId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'elementId' when calling showElementRevisionUsingGET",
        new ApiException(400, "Missing the required parameter 'elementId' when calling showElementRevisionUsingGET"));
    }
    // verify the required parameter 'revision' is set
    if (revision == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'revision' when calling showElementRevisionUsingGET",
        new ApiException(400, "Missing the required parameter 'revision' when calling showElementRevisionUsingGET"));
    }

    // create path and map variables
    String path = "/orgs/{orgId}/patients/{patientId}/elements/{elementId}/history/{revision}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "orgId" + "\\}", apiInvoker.escapeString(orgId.toString())).replaceAll("\\{" + "patientId" + "\\}", apiInvoker.escapeString(patientId.toString())).replaceAll("\\{" + "elementId" + "\\}", apiInvoker.escapeString(elementId.toString())).replaceAll("\\{" + "revision" + "\\}", apiInvoker.escapeString(revision.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * showElement
  * showElement
   * @param orgId orgId
   * @param patientId patientId
   * @param elementId elementId
   * @return String
  */
  public String showElementUsingGET (Long orgId, Long patientId, Long elementId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'orgId' is set
    if (orgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orgId' when calling showElementUsingGET",
        new ApiException(400, "Missing the required parameter 'orgId' when calling showElementUsingGET"));
    }
    // verify the required parameter 'patientId' is set
    if (patientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'patientId' when calling showElementUsingGET",
        new ApiException(400, "Missing the required parameter 'patientId' when calling showElementUsingGET"));
    }
    // verify the required parameter 'elementId' is set
    if (elementId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'elementId' when calling showElementUsingGET",
        new ApiException(400, "Missing the required parameter 'elementId' when calling showElementUsingGET"));
    }

    // create path and map variables
    String path = "/orgs/{orgId}/patients/{patientId}/elements/{elementId}".replaceAll("\\{" + "orgId" + "\\}", apiInvoker.escapeString(orgId.toString())).replaceAll("\\{" + "patientId" + "\\}", apiInvoker.escapeString(patientId.toString())).replaceAll("\\{" + "elementId" + "\\}", apiInvoker.escapeString(elementId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * showElement
   * showElement
   * @param orgId orgId   * @param patientId patientId   * @param elementId elementId
  */
  public void showElementUsingGET (Long orgId, Long patientId, Long elementId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'orgId' is set
    if (orgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orgId' when calling showElementUsingGET",
        new ApiException(400, "Missing the required parameter 'orgId' when calling showElementUsingGET"));
    }
    // verify the required parameter 'patientId' is set
    if (patientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'patientId' when calling showElementUsingGET",
        new ApiException(400, "Missing the required parameter 'patientId' when calling showElementUsingGET"));
    }
    // verify the required parameter 'elementId' is set
    if (elementId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'elementId' when calling showElementUsingGET",
        new ApiException(400, "Missing the required parameter 'elementId' when calling showElementUsingGET"));
    }

    // create path and map variables
    String path = "/orgs/{orgId}/patients/{patientId}/elements/{elementId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "orgId" + "\\}", apiInvoker.escapeString(orgId.toString())).replaceAll("\\{" + "patientId" + "\\}", apiInvoker.escapeString(patientId.toString())).replaceAll("\\{" + "elementId" + "\\}", apiInvoker.escapeString(elementId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * writeElement
  * writeElement
   * @param orgId orgId
   * @param patientId patientId
   * @param json json
   * @return String
  */
  public String writeElementUsingPOST (Long orgId, Long patientId, String json) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = json;
    // verify the required parameter 'orgId' is set
    if (orgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orgId' when calling writeElementUsingPOST",
        new ApiException(400, "Missing the required parameter 'orgId' when calling writeElementUsingPOST"));
    }
    // verify the required parameter 'patientId' is set
    if (patientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'patientId' when calling writeElementUsingPOST",
        new ApiException(400, "Missing the required parameter 'patientId' when calling writeElementUsingPOST"));
    }
    // verify the required parameter 'json' is set
    if (json == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'json' when calling writeElementUsingPOST",
        new ApiException(400, "Missing the required parameter 'json' when calling writeElementUsingPOST"));
    }

    // create path and map variables
    String path = "/orgs/{orgId}/patients/{patientId}/elements".replaceAll("\\{" + "orgId" + "\\}", apiInvoker.escapeString(orgId.toString())).replaceAll("\\{" + "patientId" + "\\}", apiInvoker.escapeString(patientId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * writeElement
   * writeElement
   * @param orgId orgId   * @param patientId patientId   * @param json json
  */
  public void writeElementUsingPOST (Long orgId, Long patientId, String json, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = json;

    // verify the required parameter 'orgId' is set
    if (orgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orgId' when calling writeElementUsingPOST",
        new ApiException(400, "Missing the required parameter 'orgId' when calling writeElementUsingPOST"));
    }
    // verify the required parameter 'patientId' is set
    if (patientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'patientId' when calling writeElementUsingPOST",
        new ApiException(400, "Missing the required parameter 'patientId' when calling writeElementUsingPOST"));
    }
    // verify the required parameter 'json' is set
    if (json == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'json' when calling writeElementUsingPOST",
        new ApiException(400, "Missing the required parameter 'json' when calling writeElementUsingPOST"));
    }

    // create path and map variables
    String path = "/orgs/{orgId}/patients/{patientId}/elements".replaceAll("\\{format\\}","json").replaceAll("\\{" + "orgId" + "\\}", apiInvoker.escapeString(orgId.toString())).replaceAll("\\{" + "patientId" + "\\}", apiInvoker.escapeString(patientId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
