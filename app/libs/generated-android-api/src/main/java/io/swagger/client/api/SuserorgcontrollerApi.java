/**
 * SMIS2-CORE REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;


import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class SuserorgcontrollerApi {
  String basePath = "https://localhost:8080/smis2-core";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * changeUserPassword
  * changeUserPassword
   * @param orgId orgId
   * @param userId userId
   * @param json json
   * @return String
  */
  public String changeUserPasswordUsingPOST (Long orgId, Long userId, String json) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = json;
    // verify the required parameter 'orgId' is set
    if (orgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orgId' when calling changeUserPasswordUsingPOST",
        new ApiException(400, "Missing the required parameter 'orgId' when calling changeUserPasswordUsingPOST"));
    }
    // verify the required parameter 'userId' is set
    if (userId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling changeUserPasswordUsingPOST",
        new ApiException(400, "Missing the required parameter 'userId' when calling changeUserPasswordUsingPOST"));
    }
    // verify the required parameter 'json' is set
    if (json == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'json' when calling changeUserPasswordUsingPOST",
        new ApiException(400, "Missing the required parameter 'json' when calling changeUserPasswordUsingPOST"));
    }

    // create path and map variables
    String path = "/orgs/{orgId}/users/{userId}/changePassword".replaceAll("\\{" + "orgId" + "\\}", apiInvoker.escapeString(orgId.toString())).replaceAll("\\{" + "userId" + "\\}", apiInvoker.escapeString(userId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * changeUserPassword
   * changeUserPassword
   * @param orgId orgId   * @param userId userId   * @param json json
  */
  public void changeUserPasswordUsingPOST (Long orgId, Long userId, String json, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = json;

    // verify the required parameter 'orgId' is set
    if (orgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orgId' when calling changeUserPasswordUsingPOST",
        new ApiException(400, "Missing the required parameter 'orgId' when calling changeUserPasswordUsingPOST"));
    }
    // verify the required parameter 'userId' is set
    if (userId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling changeUserPasswordUsingPOST",
        new ApiException(400, "Missing the required parameter 'userId' when calling changeUserPasswordUsingPOST"));
    }
    // verify the required parameter 'json' is set
    if (json == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'json' when calling changeUserPasswordUsingPOST",
        new ApiException(400, "Missing the required parameter 'json' when calling changeUserPasswordUsingPOST"));
    }

    // create path and map variables
    String path = "/orgs/{orgId}/users/{userId}/changePassword".replaceAll("\\{format\\}","json").replaceAll("\\{" + "orgId" + "\\}", apiInvoker.escapeString(orgId.toString())).replaceAll("\\{" + "userId" + "\\}", apiInvoker.escapeString(userId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * listDefaultUserRoles
  * listDefaultUserRoles
   * @param orgId orgId
   * @return String
  */
  public String listDefaultUserRolesUsingGET (Long orgId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'orgId' is set
    if (orgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orgId' when calling listDefaultUserRolesUsingGET",
        new ApiException(400, "Missing the required parameter 'orgId' when calling listDefaultUserRolesUsingGET"));
    }

    // create path and map variables
    String path = "/orgs/{orgId}/users/roles".replaceAll("\\{" + "orgId" + "\\}", apiInvoker.escapeString(orgId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * listDefaultUserRoles
   * listDefaultUserRoles
   * @param orgId orgId
  */
  public void listDefaultUserRolesUsingGET (Long orgId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'orgId' is set
    if (orgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orgId' when calling listDefaultUserRolesUsingGET",
        new ApiException(400, "Missing the required parameter 'orgId' when calling listDefaultUserRolesUsingGET"));
    }

    // create path and map variables
    String path = "/orgs/{orgId}/users/roles".replaceAll("\\{format\\}","json").replaceAll("\\{" + "orgId" + "\\}", apiInvoker.escapeString(orgId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * listUsers
  * listUsers
   * @param orgId orgId
   * @param since sinceDate
   * @return String
  */
  public String listUsersUsingGET (Long orgId, String since) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'orgId' is set
    if (orgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orgId' when calling listUsersUsingGET",
        new ApiException(400, "Missing the required parameter 'orgId' when calling listUsersUsingGET"));
    }

    // create path and map variables
    String path = "/orgs/{orgId}/users".replaceAll("\\{" + "orgId" + "\\}", apiInvoker.escapeString(orgId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "since", since));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * listUsers
   * listUsers
   * @param orgId orgId   * @param since sinceDate
  */
  public void listUsersUsingGET (Long orgId, String since, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'orgId' is set
    if (orgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orgId' when calling listUsersUsingGET",
        new ApiException(400, "Missing the required parameter 'orgId' when calling listUsersUsingGET"));
    }

    // create path and map variables
    String path = "/orgs/{orgId}/users".replaceAll("\\{format\\}","json").replaceAll("\\{" + "orgId" + "\\}", apiInvoker.escapeString(orgId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "since", since));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * lookupRefData
  * lookupRefData
   * @param orgId orgId
   * @param ean ean
   * @param fullName fullName
   * @param lastName lastName
   * @param firstName firstName
   * @param singleResult singleResult
   * @return String
  */
  public String lookupRefDataUsingGET (Long orgId, String ean, String fullName, String lastName, String firstName, Boolean singleResult) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = singleResult;
    // verify the required parameter 'orgId' is set
    if (orgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orgId' when calling lookupRefDataUsingGET",
        new ApiException(400, "Missing the required parameter 'orgId' when calling lookupRefDataUsingGET"));
    }
    // verify the required parameter 'ean' is set
    if (ean == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ean' when calling lookupRefDataUsingGET",
        new ApiException(400, "Missing the required parameter 'ean' when calling lookupRefDataUsingGET"));
    }
    // verify the required parameter 'fullName' is set
    if (fullName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'fullName' when calling lookupRefDataUsingGET",
        new ApiException(400, "Missing the required parameter 'fullName' when calling lookupRefDataUsingGET"));
    }
    // verify the required parameter 'lastName' is set
    if (lastName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lastName' when calling lookupRefDataUsingGET",
        new ApiException(400, "Missing the required parameter 'lastName' when calling lookupRefDataUsingGET"));
    }
    // verify the required parameter 'firstName' is set
    if (firstName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'firstName' when calling lookupRefDataUsingGET",
        new ApiException(400, "Missing the required parameter 'firstName' when calling lookupRefDataUsingGET"));
    }

    // create path and map variables
    String path = "/orgs/{orgId}/users/refDataLookup".replaceAll("\\{" + "orgId" + "\\}", apiInvoker.escapeString(orgId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ean", ean));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "fullName", fullName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lastName", lastName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "firstName", firstName));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * lookupRefData
   * lookupRefData
   * @param orgId orgId   * @param ean ean   * @param fullName fullName   * @param lastName lastName   * @param firstName firstName   * @param singleResult singleResult
  */
  public void lookupRefDataUsingGET (Long orgId, String ean, String fullName, String lastName, String firstName, Boolean singleResult, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = singleResult;

    // verify the required parameter 'orgId' is set
    if (orgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orgId' when calling lookupRefDataUsingGET",
        new ApiException(400, "Missing the required parameter 'orgId' when calling lookupRefDataUsingGET"));
    }
    // verify the required parameter 'ean' is set
    if (ean == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ean' when calling lookupRefDataUsingGET",
        new ApiException(400, "Missing the required parameter 'ean' when calling lookupRefDataUsingGET"));
    }
    // verify the required parameter 'fullName' is set
    if (fullName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'fullName' when calling lookupRefDataUsingGET",
        new ApiException(400, "Missing the required parameter 'fullName' when calling lookupRefDataUsingGET"));
    }
    // verify the required parameter 'lastName' is set
    if (lastName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lastName' when calling lookupRefDataUsingGET",
        new ApiException(400, "Missing the required parameter 'lastName' when calling lookupRefDataUsingGET"));
    }
    // verify the required parameter 'firstName' is set
    if (firstName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'firstName' when calling lookupRefDataUsingGET",
        new ApiException(400, "Missing the required parameter 'firstName' when calling lookupRefDataUsingGET"));
    }

    // create path and map variables
    String path = "/orgs/{orgId}/users/refDataLookup".replaceAll("\\{format\\}","json").replaceAll("\\{" + "orgId" + "\\}", apiInvoker.escapeString(orgId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "ean", ean));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "fullName", fullName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lastName", lastName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "firstName", firstName));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * lookup
  * lookup
   * @param orgId orgId
   * @param gln gln
   * @return String
  */
  public String lookupUsingGET (Long orgId, String gln) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'orgId' is set
    if (orgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orgId' when calling lookupUsingGET",
        new ApiException(400, "Missing the required parameter 'orgId' when calling lookupUsingGET"));
    }
    // verify the required parameter 'gln' is set
    if (gln == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'gln' when calling lookupUsingGET",
        new ApiException(400, "Missing the required parameter 'gln' when calling lookupUsingGET"));
    }

    // create path and map variables
    String path = "/orgs/{orgId}/users/lookup".replaceAll("\\{" + "orgId" + "\\}", apiInvoker.escapeString(orgId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "gln", gln));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * lookup
   * lookup
   * @param orgId orgId   * @param gln gln
  */
  public void lookupUsingGET (Long orgId, String gln, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'orgId' is set
    if (orgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orgId' when calling lookupUsingGET",
        new ApiException(400, "Missing the required parameter 'orgId' when calling lookupUsingGET"));
    }
    // verify the required parameter 'gln' is set
    if (gln == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'gln' when calling lookupUsingGET",
        new ApiException(400, "Missing the required parameter 'gln' when calling lookupUsingGET"));
    }

    // create path and map variables
    String path = "/orgs/{orgId}/users/lookup".replaceAll("\\{format\\}","json").replaceAll("\\{" + "orgId" + "\\}", apiInvoker.escapeString(orgId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "gln", gln));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * showUser
  * showUser
   * @param orgId orgId
   * @param userId userId
   * @return String
  */
  public String showUserUsingGET (Long orgId, Long userId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'orgId' is set
    if (orgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orgId' when calling showUserUsingGET",
        new ApiException(400, "Missing the required parameter 'orgId' when calling showUserUsingGET"));
    }
    // verify the required parameter 'userId' is set
    if (userId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling showUserUsingGET",
        new ApiException(400, "Missing the required parameter 'userId' when calling showUserUsingGET"));
    }

    // create path and map variables
    String path = "/orgs/{orgId}/users/{userId}".replaceAll("\\{" + "orgId" + "\\}", apiInvoker.escapeString(orgId.toString())).replaceAll("\\{" + "userId" + "\\}", apiInvoker.escapeString(userId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * showUser
   * showUser
   * @param orgId orgId   * @param userId userId
  */
  public void showUserUsingGET (Long orgId, Long userId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'orgId' is set
    if (orgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orgId' when calling showUserUsingGET",
        new ApiException(400, "Missing the required parameter 'orgId' when calling showUserUsingGET"));
    }
    // verify the required parameter 'userId' is set
    if (userId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling showUserUsingGET",
        new ApiException(400, "Missing the required parameter 'userId' when calling showUserUsingGET"));
    }

    // create path and map variables
    String path = "/orgs/{orgId}/users/{userId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "orgId" + "\\}", apiInvoker.escapeString(orgId.toString())).replaceAll("\\{" + "userId" + "\\}", apiInvoker.escapeString(userId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * writeUser
  * writeUser
   * @param orgId orgId
   * @param json json
   * @return String
  */
  public String writeUserUsingPOST (Long orgId, String json) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = json;
    // verify the required parameter 'orgId' is set
    if (orgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orgId' when calling writeUserUsingPOST",
        new ApiException(400, "Missing the required parameter 'orgId' when calling writeUserUsingPOST"));
    }
    // verify the required parameter 'json' is set
    if (json == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'json' when calling writeUserUsingPOST",
        new ApiException(400, "Missing the required parameter 'json' when calling writeUserUsingPOST"));
    }

    // create path and map variables
    String path = "/orgs/{orgId}/users".replaceAll("\\{" + "orgId" + "\\}", apiInvoker.escapeString(orgId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * writeUser
   * writeUser
   * @param orgId orgId   * @param json json
  */
  public void writeUserUsingPOST (Long orgId, String json, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = json;

    // verify the required parameter 'orgId' is set
    if (orgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orgId' when calling writeUserUsingPOST",
        new ApiException(400, "Missing the required parameter 'orgId' when calling writeUserUsingPOST"));
    }
    // verify the required parameter 'json' is set
    if (json == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'json' when calling writeUserUsingPOST",
        new ApiException(400, "Missing the required parameter 'json' when calling writeUserUsingPOST"));
    }

    // create path and map variables
    String path = "/orgs/{orgId}/users".replaceAll("\\{format\\}","json").replaceAll("\\{" + "orgId" + "\\}", apiInvoker.escapeString(orgId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
